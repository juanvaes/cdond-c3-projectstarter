version: 2.1
   

commands:
  create-env:
    description: Create .env
    steps:
      - run:
          name: Adding environment variables to .env file
          command: |
            echo ENVIRONMENT=$ENVIRONMENT > "./backend/.env"
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> "./backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> "./backend/.env"
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> "./backend/.env"
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> "./backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "./backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "./backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "./backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "./backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "./backend/.env"

  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      when_to_run:
        type: string
        default: "on_fail"
    steps:
      - run:
          name: Destroy backend environment
          when: << parameters.when_to_run >>
          command: |
            aws cloudformation delete-stack --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Destroy frontend environment
          when: << parameters.when_to_run >>
          command: |
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            aws s3 rb s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --force
            aws cloudformation delete-stack --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"

  revert-migrations:
    description: Revert the last migration.
    parameters:
      when_to_run:
        type: string
        default: "on_fail"
    steps:
      - run:
          name: Revert migrations
          when: << parameters.when_to_run >>
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl -H "token: 6f877033-4e1d-4232-a437-2f12d1db95c5" --request GET https://api.memstash.io/values/migration-status-${CIRCLE_WORKFLOW_ID:0:7})
            echo $SUCCESS
            if(( "$SUCCESS"=="1" )); 
            then
              cd ./backend
              npm install
              npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm i
            npm run build
      - save_cache:
          key: frontend-build
          paths: [frontend/node_modules]

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Build back-end
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          key: backend-build
          paths: [backend/node_modules]

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run Frontend Unit Tests
          command: |
            cd frontend
            npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run Backend Unit Tests
          command: |
            cd backend
            npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: cibuilds/aws:latest
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/backend.yml \
             --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
             --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
             --template-file .circleci/files/frontend.yml \
             --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
             --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
             --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Save backend ip in memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "BACKEND_IP=${BACKEND_IP}"
            curl -H "Content-Type: text/plain" -H "token: 6f877033-4e1d-4232-a437-2f12d1db95c5" --request PUT --data "$BACKEND_IP" https://api.memstash.io/values/backend-ip-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add backend ip to inventory.txt
          command: |
            BACKEND_IP=$(curl -H "token: 6f877033-4e1d-4232-a437-2f12d1db95c5" --request GET https://api.memstash.io/values/backend-ip-${CIRCLE_WORKFLOW_ID:0:7})
            echo ${BACKEND_IP} >> ./.circleci/ansible/inventory.txt
            cat ./.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: .
          paths:
            - ./.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          when_to_run: on_fail

  configure-infrastructure:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [3e:a6:56:d0:84:05:53:33:b4:84:8a:8b:2e:48:74:1b]
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
            ansible --version
      - create-env
      - run:
          name: Configure server
          command: |
            cat ./.circleci/ansible/inventory.txt
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i ./.circleci/ansible/inventory.txt ./.circleci/ansible/configure-server.yml
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          when_to_run: on_fail  

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: .
      - create-env
      - run:
          name: Run migrations
          working_directory: ./backend
          command: |
            ls -la
            npm run migrations > log_migration.txt
            cat log_migration.txt
      - run:
          name: Send migration results to memstash
          working_directory: ./backend
          command: |
            if grep "has been executed successfully" log_migration.txt;
            then
              echo "Database migration has been executed successfully"
              curl -H "Content-Type: text/plain" -H "token: 6f877033-4e1d-4232-a437-2f12d1db95c5" --request PUT --data "1" https://api.memstash.io/values/migration-status-${CIRCLE_WORKFLOW_ID:0:7}
            else
              echo "Database migration has failed, verify DB setup!"
              curl -H "Content-Type: text/plain" -H "token: 6f877033-4e1d-4232-a437-2f12d1db95c5" --request PUT --data "0" https://api.memstash.io/values/migration-status-${CIRCLE_WORKFLOW_ID:0:7}
            fi
     # Here's where you will add some code to rollback on failure
      - destroy-environment:
          when_to_run: on_fail

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - attach_workspace:
          at: .
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -H "token: 6f877033-4e1d-4232-a437-2f12d1db95c5" --request GET https://api.memstash.io/values/backend-ip-${CIRCLE_WORKFLOW_ID:0:7})
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo ENVIRONMENT=production > "frontend/.env"
            echo API_URL=${API_URL} >> "frontend/.env"
            cat frontend/.env
      - run:
          name: Build frontend application
          command: |
            cd ./frontend
            pwd
            npm i
            npm run build
      - run:
          name: Deploy frontend objects
          command: |
            aws s3 cp ./frontend/dist "s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}" --recursive
      - persist_to_workspace:
          root: .
          paths:
            - ./frontend/dist
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          when_to_run: on_fail
      - revert-migrations:
          when_to_run: on_fail
      
  deploy-backend:
    docker:
      - image: python:3.9.0-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: [3e:a6:56:d0:84:05:53:33:b4:84:8a:8b:2e:48:74:1b]
      - attach_workspace:
          at: .
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh nodejs npm openssh-client
            apk add --no-cache --upgrade bash
            pip install awscli
      - create-env
      - run:
          name: Deploy backend
          command: |
            pwd
            tar czf backend.tar.gz backend/
            ls -la
            ls -la backend
            export ANSIBLE_HOST_KEY_CHECKING=false
            ansible-playbook -i ./.circleci/ansible/inventory.txt ./.circleci/ansible/deploy-backend.yml -vvv
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          when_to_run: on_fail
      - revert-migrations:
          when_to_run: on_fail

  smoke-test:
    docker:
      # Lightweight Docker image 
      - image: python:3.9.0-alpine
    steps:
      # Checkout code from git
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli
      - create-env
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: 6f877033-4e1d-4232-a437-2f12d1db95c5" --request GET https://api.memstash.io/values/backend-ip-${CIRCLE_WORKFLOW_ID:0:7})
            API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            curl -s "${API_URL}/api/status" -v
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com"
            curl -s ${URL} | grep "Welcome"
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          when_to_run: on_fail
      - revert-migrations:
          when_to_run: on_fail

  cloudfront-update:
    docker:
      # Docker image that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip curl
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Send old workflow id to memstash
          working_directory: ./.circleci/files
          command: |
            OLD_W_ID=$(aws cloudformation list-exports \
                       Exports[?Name==\`WorkflowID\`].Value" \
                       --no-paginate --output text)
            echo "OLD_W_ID=${OLD_W_ID}"
            curl -H "Content-Type: text/plain" -H "token: 6f877033-4e1d-4232-a437-2f12d1db95c5" --request PUT --data "$OLD_W_ID" https://api.memstash.io/values/OLD_W_ID
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file ./.circleci/files/cloudfront.yml \
              --tags project=udapeople \
              --stack-name "udapeople-cloudfront-production" \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          when_to_run: on_fail
      - revert-migrations:
          when_to_run: on_fail

  cleanup:
    docker:
      # Docker image that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old workflow ID and remove old stacks and files
          command: |
            OLD_W_ID=$(curl -H "token: 6f877033-4e1d-4232-a437-2f12d1db95c5" --request GET https://api.memstash.io/values/OLD_W_ID)
            CURRENT_W_ID=${CIRCLE_WORKFLOW_ID:0:7}
            echo "OLD_W_ID=$OLD_W_ID"
            echo "CURRENT_W_ID=$CURRENT_W_ID"

            if [[ "$CURRENT_W_ID" != "$OLD_W_ID" ]]
            then
              echo "$OLD_W_ID != $CURRENT_W_ID: Deleting old stack id"
              aws s3 rm "s3://udapeople-${OLD_W_ID} --recursive"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OLD_W_ID}"
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OLD_W_ID}"
            else
              echo "$OLD_W_ID == $CURRENT_W_ID: Nothing to delete"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
